{"files":[{"id":"fbc3b0f5-09d2-414c-afec-818722fc6d2c","name":"Help","type":"server_js","source":"/*\n * Thank you kindly for using the Easy Twitter Bot\n * Prerequisites:\n * \tA Consumer Key and Consumer Secret for a Twitter App ( https://apps.twitter.com/ )\n * \n * How to use:\n * 0.) Set your settings under Settings.gs and run the Settings function. If you have not authorized the App for your Account yet\n * \t\tgo to OAuth.gs and run AuthManually and go to the link in the Protocol ( Ctrl + Enter ).\n * 1.) Go to Bot.gs and run the startup function\n * 2.) Shut the bot down or restart with the respective functions in Bot.gs\n * \n * If you need help or find a bug, try to get a hold of me on 4chan\n * \n*/"},{"id":"bfdb345b-e655-4340-a992-e83ac55c4f58","name":"Settings","type":"server_js","source":"// Put the responses to other people\u0027s replies here\nvar Responses \u003d [\n  \"Hello World!\", \n  \"Twitter Bot Sample Reply\"\n];\n\n// Put whatever you want to Autopost here\nvar RandomTweet \u003d [\n  \"Hello World!\",\n  \"Twitter Bot Sample Post\"\n];\n\nfunction Settings() {\n  setUserProperty(\"CONSUMER_KEY\", \"\");\n  setUserProperty(\"CONSUMER_SECRET\", \"\");\n  setUserProperty(\"TWITTER_HANDLE\", \"\");\n  setScriptProperty(\"PROJECT_KEY\", \"\");\n}"},{"id":"2aef88fc-ebc4-450f-b743-d27ae2fd4937","name":"Bot","type":"server_js","source":"// Start the bot\n// Auto Tweeting is every hour by default, checking for new replies every 5 minutes\n// Change it in the lines 31\u002632 (ScriptApp.newTrigger)\nfunction startup() {\n  Settings();\n  if (!propsSet()) {\n    Logger.log(\"Cannot start Bot! Not all necessary User Properties are set! Please set the following User Properties:\");\n    Logger.log(\"CONSUMER_KEY\");\n    Logger.log(\"CONSUMER_SECRET\");\n    Logger.log(\"TWITTER_HANDLE\");\n    Logger.log(\"PROJECT_KEY\");\n    return false;\n  }\n  \n  if(getUserProperty(\"MAX_TWITTER_ID\") \u003d\u003d\u003d null) {\n    setUserProperty(\"MAX_TWITTER_ID\", 0);\n  }\n  \n  setUserProperty(\"LastMessage\", -1);\n  setUserProperty(\"LastAutoTweet\", -1)\n  \n  Logger.log(\"Starting up Botscript\");\n  \n  Logger.log(\"Deleting all active Triggers before adding new ones\");\n  var triggers \u003d ScriptApp.getProjectTriggers();\n  for(var i\u003d0; i \u003c triggers.length; i++) {\n    ScriptApp.deleteTrigger(triggers[i]);\n  }\n  \n  Logger.log(\"Adding new Triggers\");\n  ScriptApp.newTrigger(\"fetchTweets\").timeBased().everyMinutes(5).create();\n  ScriptApp.newTrigger(\"postRandomTweet\").timeBased().nearMinute(30).everyHours(1).create()\n  \n  Logger.log(\"Posting random tweet \u0026 fetching Tweets for the 1st time\");\n  fetchTweets();\n  postRandomTweet();\n}\n\n// Stop the bot from Autoposting and Autoreplying\nfunction shutdown() {\n  Logger.log(\"Shutting down Bot\");\n  var triggers \u003d ScriptApp.getProjectTriggers();\n  for(var i\u003d0; i \u003c triggers.length; i++) {\n    ScriptApp.deleteTrigger(triggers[i]);\n  }\n}\n\n// Shutdown and then start the bot up again\nfunction restart() {\n  Logger.log(\"Restarting Bot\");\n  shutdown();\n  startup();\n}"},{"id":"32608399-bd91-4d68-bbb6-33102c748149","name":"OAuth","type":"server_js","source":"function getOAuthService() {\n  var service \u003d OAuth1.createService(\u0027twitter\u0027);\n  service.setAccessTokenUrl(\u0027https://api.twitter.com/oauth/access_token\u0027)\n  service.setRequestTokenUrl(\u0027https://api.twitter.com/oauth/request_token\u0027)\n  service.setAuthorizationUrl(\u0027https://api.twitter.com/oauth/authorize\u0027)\n  service.setConsumerKey(getUserProperty(\"CONSUMER_KEY\"));\n  service.setConsumerSecret(getUserProperty(\"CONSUMER_SECRET\"));\n  service.setProjectKey(getScriptProperty(\"PROJECT_KEY\"));\n  service.setCallbackFunction(\u0027authCallback\u0027);\n  service.setPropertyStore(ScriptProps());\n  return service;\n}\n\nfunction authCallback(request) {\n  var service \u003d getOAuthService();\n  var isAuthorized \u003d service.handleCallback(request);\n  if (isAuthorized) {\n    return HtmlService.createHtmlOutput(\u0027Success! You can close this page and start the script again.\u0027);\n  } else {\n    return HtmlService.createHtmlOutput(\u0027Denied. You can close this page\u0027);\n  }\n}\n\nfunction authManually() {\n  var service \u003d getOAuthService();\n  if(service.hasAccess()) {\n    Logger.log(\"Access already given\");\n  } else {\n    var authorizationUrl \u003d service.authorize();\n    Logger.log(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n    throw(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n  }\n}\n\nfunction resetToken() {\n  var service \u003d OAuth1.createService(\u0027twitter\u0027);\n  service.setPropertyStore(ScriptProps());\n  service.reset();\n}"},{"id":"ac701d0c-027f-4b16-9c9e-e9ab081ac19a","name":"Twitter","type":"server_js","source":"function sendTweetToUser(user, reply_id, tweet) {\n  service \u003d getOAuthService();\n  if(service.hasAccess()) {\n    Logger.log(\"Sending tweet to user \" + user);\n    var status \u003d \"https://api.twitter.com/1.1/statuses/update.json\";\n    \n    status \u003d status + \"?status\u003d\" + encodeString(\"@\" + user + \" \" + tweet);\n    status \u003d status + \"\u0026in_reply_to_status_id\u003d\" + reply_id;\n    \n    try {\n      var options \u003d {\n        \"method\": \"post\",\n        \"contentType\": \"application/x-www-form-urlencoded; charset\u003dutf-8\",\n        \"escaping\": false,\n      }\n      var result \u003d service.setMethod(\"post\").fetch(status, options);\n      setUserProperty(\"MAX_TWITTER_ID\", reply_id);\n      Logger.log(result.getContentText());    \n    }  \n    catch (e) {\n      Logger.log(e.toString());\n    }\n    Logger.log(\"Finished sending tweet to user \" + user);\n  } else {\n    var authorizationUrl \u003d service.authorize();\n    Logger.log(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n    throw(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n  }\n}\n\nfunction sendTweet(tweet) {\n  service \u003d getOAuthService();\n  if(service.hasAccess()) {\n    Logger.log(\"Posting Tweet \\\"\" + tweet + \"\\\"\" );\n    var status \u003d \"https://api.twitter.com/1.1/statuses/update.json\";\n    \n    status \u003d status + \"?status\u003d\" + encodeString(tweet);\n    \n    try {\n      var options \u003d {\n        \"method\": \"post\",\n        \"contentType\": \"application/x-www-form-urlencoded; charset\u003dutf-8\",\n        \"escaping\": false,\n      }\n      var result \u003d service.setMethod(\"post\").fetch(status, options);\n      Logger.log(result.getContentText());    \n    }  \n    catch (e) {\n      Logger.log(e.toString());\n    }\n    Logger.log(\"Finished posting tweet \\\"\" + tweet + \"\\\"\");\n  } else {\n    var authorizationUrl \u003d service.authorize();\n    Logger.log(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n    throw(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n  }\n}\n\nfunction fetchTweets() {\n  service \u003d getOAuthService();\n  if(service.hasAccess()) {\n    var twitter_handle \u003d getUserProperty(\"TWITTER_HANDLE\");\n    var phrase \u003d \"to:\" + twitter_handle;\n    var search \u003d \"https://api.twitter.com/1.1/search/tweets.json?count\u003d5\u0026include_entities\u003dfalse\u0026result_type\u003drecent\u0026q\u003d\"; \n    search \u003d search + encodeString(phrase) + \"\u0026since_id\u003d\" + getUserProperty(\"MAX_TWITTER_ID\");\n    try {\n      var result \u003d service.setMethod(\"get\").fetch(search);   \n      Logger.log(\"Evaluating fetched tweets\");\n      if (result.getResponseCode() \u003d\u003d\u003d 200) {\n        \n        var data \u003d JSON.parse(result.getContentText());\n        \n        if (data) {\n          var tweets \u003d data.statuses;\n          //Logger.log(tweets);\n          for (var i\u003dtweets.length-1; i\u003e\u003d0; i--) {\n            Logger.log(\"Cycling through tweet \" + i);\n            Logger.log(tweets[i].text);\n            var question \u003d tweets[i].text.replace(new RegExp(\"\\@\" + twitter_handle, \"ig\"), \"\");\n            switch (evalCommand(question)) {\n              case 0:\n                day \u003d \"Sunday\";\n                break;\n              default:\n                Logger.log(\"No command detected! Responding to User!\");\n                var answer \u003d getResponse();\n                sendTweetToUser(tweets[i].user.screen_name, tweets[i].id_str, answer); \n                break;\n            }      \n          }\n        }\n      } else {\n        Logger.log(\"Response Code not 200! Response Code: \" + result.getResponseCode());\n      }\n    } catch (e) {\n      Logger.log(e.toString());\n    }\n  } else {\n    var authorizationUrl \u003d service.authorize();\n    Logger.log(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n    throw(\u0027Please visit the following URL and then re-run the script: \u0027 + authorizationUrl);\n  }\n}"},{"id":"1f16870e-e9f4-44d9-8fe0-67977a572ca7","name":"Functions","type":"server_js","source":"COMMANDRETURN \u003d Object.freeze({\n  PAUSE: 0,\n  RESTART: 1,\n  SHITPOST: 2\n});\n\nfunction ScriptProps() { return PropertiesService.getScriptProperties(); }\nfunction UserProps() { return PropertiesService.getUserProperties(); }\n\nfunction setScriptProperty(key, value) { ScriptProps().setProperty(key, value); }\nfunction getScriptProperty(key) { return ScriptProps().getProperty(key); }\n\nfunction setUserProperty(key, value) { UserProps().setProperty(key, value); }\nfunction getUserProperty(key) { return UserProps().getProperty(key); }\n\nfunction mergeProperties (from, to, replace) {\n\n  var props \u003d from.getProperties();\n  var existingProps \u003d to.getProperties();\n  \n  Object.keys(props).forEach ( function (k) {\n    if (replace || !existingProps.hasOwnProperty(k)) {\n      existingProps[k] \u003d props[k];\n    }\n  });\n  \n  to.setProperties(existingProps);\n  return existingProps;\n}\n\nfunction migrate() {\n\n  mergeProperties ( ScriptProperties , PropertiesService.getScriptProperties());\n  mergeProperties ( UserProperties , PropertiesService.getUserProperties());\n\n  // check\n  Logger.log(\"script\");\n  Logger.log( PropertiesService.getScriptProperties().getProperties());\n  \n  Logger.log(\"user\");\n  Logger.log( PropertiesService.getUserProperties().getProperties());\n}\n\nfunction evalCommand(cmd) {\n  \n}\n\n// Thank you +Martin Hawksey - you are awesome\nfunction encodeString (q) {\n  var str \u003d q.replace(/\\(/g,\u0027{\u0027).replace(/\\)/g,\u0027}\u0027).replace(/\\[/g,\u0027{\u0027).replace(/\\]/g,\u0027}\u0027).replace(/\\!/g, \u0027|\u0027).replace(/\\*/g, \u0027x\u0027).replace(/\\\u0027/g, \u0027\u0027);\n  return encodeURIComponent(str);\n  return str\n}\n\nfunction propsSet() {\n  if(getUserProperty(\"CONSUMER_KEY\") \u003d\u003d\u003d \"\" || getUserProperty(\"CONSUMER_SECRET\") \u003d\u003d\u003d \"\" || getUserProperty(\"TWITTER_HANDLE\") \u003d\u003d\u003d \"\" || getScriptProperty(\"PROJECT_KEY\") \u003d\u003d\u003d \"\") {\n    return false; \n  }\n  return true; \n}\n\nfunction postRandomTweet() {\n  sendTweet(getTweet());\n}\n\nfunction getResponse() {\n  \n  Logger.log(\"Getting random response\");\n  \n  var random \u003d Math.floor(Math.random() * Responses.length);\n  while (random \u003d\u003d getUserProperty(\"LastMessage\")) {\n    random \u003d Math.floor(Math.random() * Responses.length);\n  }\n  setUserProperty(\"LastMessage\", random);\n  Logger.log(random);\n  return Responses[random];\n}  \n\nfunction getTweet() {\n  \n  Logger.log(\"Posting random Tweet\");\n  \n  var random \u003d Math.floor(Math.random() * Responses.length);\n  while (random \u003d\u003d getUserProperty(\"LastAutoTweet\")) {\n    random \u003d Math.floor(Math.random() * Responses.length);\n  }\n  setUserProperty(\"LastAutoTweet\", random);\n  return RandomTweet[random];\n}"}]}